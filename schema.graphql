interface Node {
  id: ID!
}

type Article implements Node {
  id: ID!
  title: String!
  content: String!
}

type ArticleEdge {
  cursor: String!
  node: Article!
}

type ArticleConnection {
  nodes: [Article!]!
  edges: [ArticleEdge!]!
  pageInfo: PageInfo!
}

type Scrap implements Node {
  id: ID!
  title: String!
  content: String!
}

type ScrapEdge {
  cursor: String!
  node: Scrap!
}

type ScrapConnection {
  edges: [ScrapEdge]
  pageInfo: PageInfo!
}

union SearchResult = Article | Scrap

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Image {
  url: String!
  width: Int!
  height: Int!
}

type User implements Node {
  id: ID!
  name: String!
  avatar: Image!
}

type Viewer {
  user: User!
}

type Query {
  latestArticles(
    first: Int
    after: String
    last: Int
    before: String
  ): ArticleConnection!
  scraps(first: Int, after: String, last: Int, before: String): ScrapConnection
  search(query: String!): [SearchResult!]!
  node(id: ID!): Node
  viewer: Viewer
}
